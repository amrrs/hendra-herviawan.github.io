<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorials on M Hendra Herviawan~Blog</title>
    <link>/tutorial/</link>
    <description>Recent content in Tutorials on M Hendra Herviawan~Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/tutorial/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MNIST Hand writing recognition with Keras</title>
      <link>/tutorial/neural-network/mnist_handwriting_recognition_with_keras/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tutorial/neural-network/mnist_handwriting_recognition_with_keras/</guid>
      <description>M Hendra Herviawan Project Overview &amp;hellip;
# Build the model of a logistic classifier import os import gzip import six.moves.cPickle as pickle import numpy as np from keras.models import Sequential from keras.layers import Dense, Activation, Dropout from keras.datasets import mnist from keras.utils import np_utils  Using TensorFlow backend. /home/x/.local/bin/intelpython3/lib/python3.6/importlib/_bootstrap.py:205: RuntimeWarning: compiletime version 3.5 of module &#39;tensorflow.python.framework.fast_tensor_util&#39; does not match runtime version 3.6 return f(*args, **kwds)  Preparing the Data We can learn the basics of Keras by walking through a simple example: recognizing handwritten digits from the MNIST dataset.</description>
    </item>
    
    <item>
      <title>MNIST Hand writing recognition with Pytorch</title>
      <link>/tutorial/neural-network/mnist_handwriting_recognition_with_pytorch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tutorial/neural-network/mnist_handwriting_recognition_with_pytorch/</guid>
      <description>M Hendra Herviawan Project Overview &amp;hellip;
import torch import torch.nn as nn import torchvision.transforms as transforms import torchvision.datasets as dsets from torch.autograd import Variable  LOADING DATASET train_dataset = dsets.MNIST(root=&#39;./data&#39;, train=True, transform=transforms.ToTensor(), download=True) test_dataset = dsets.MNIST(root=&#39;./data&#39;, train=False, transform=transforms.ToTensor())  Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz Processing... Done!  MAKING DATASET ITERABLE batch_size = 100 n_iters = 3000 num_epochs = n_iters / (len(train_dataset) / batch_size) num_epochs = int(num_epochs) train_loader = torch.</description>
    </item>
    
    <item>
      <title>Univariate logistic regression with Tensorflow</title>
      <link>/tutorial/neural-network/univariate_logistic_regression_with_tensorflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tutorial/neural-network/univariate_logistic_regression_with_tensorflow/</guid>
      <description>M Hendra Herviawan Project Overview Logistic regression adalah model statistical untuk menganalisa data dimana terdapat satu atau lebih independent variable dan mengeluarkan Output dichotomi variable (hanya terdapat dua kemungkinan). Sebuah Neuron pada Neural network merupakan Logistic regression yang menerima satu atau lebih input dan mengeluarkan probabilitas antara 0 dan 1.
import os os.environ[&amp;quot;CUDA_DEVICE_ORDER&amp;quot;] = &amp;quot;PCI_BUS_ID&amp;quot; # see issue #152 os.environ[&amp;quot;CUDA_VISIBLE_DEVICES&amp;quot;] = &amp;quot;&amp;quot;  import numpy as np import pandas as pd from sklearn import datasets, metrics, preprocessing from sklearn.</description>
    </item>
    
  </channel>
</rss>